import { z } from "zod";

export const loginSchema = z.object({
  username: z
    .string()
    .min(1, { message: "Campul este obligatoriu" })
    .max(50)
    .trim(),
  password: z.string().min(1, { message: "Campul este obligatoriu" }).max(50),
});

export const registerSchema = z.object({
  name: z
    .string()
    .min(1, { message: "Campul este obligatoriu" })
    .max(50)
    .trim(),
  username: z
    .string()
    .min(1, { message: "Campul este obligatoriu" })
    .max(50)
    .trim(),
  password: z.string().min(1, { message: "Campul este obligatoriu" }).max(50),
});

export const userSchema = z.object({
  name: z
    .string()
    .min(1, { message: "Campul este obligatoriu" })
    .max(50)
    .trim(),
  username: z
    .string()
    .min(1, { message: "Campul este obligatoriu" })
    .max(50)
    .trim(),
  password: z.string().min(1, { message: "Campul este obligatoriu" }).max(50),
  id: z.string().min(1).max(50),
});

export const ProductSchema = z.object({
  id: z.string().optional(), // Auto-generated by Prisma
  sku: z.string().min(1, "SKU este obligatoriu"),
  name: z.string().min(1, "Numele este obligatoriu"),
  price: z
    .number({ message: "Pretul trebuie sa fie un numar" })
    .positive("Pretul trebuie sa fie un numar pozitiv"),
  stock: z
    .number({ message: "Stock-ul trebuie sa fie un numar" })
    .int()
    .nonnegative("Stocul trebuie sa fie un numar pozitiv"),
  width: z.number().min(1, "Latimea este obligatorie"),
  height: z.number().min(1, "Inaltimea este obligatorie"),
  length: z.number().min(1, "Lungimea este obligatorie"),
  weight: z.number().min(0.1, "Greutatea este obligatorie"),
  mainImage: z.object({
    id: z.string().min(1, "ID-ul este obligatoriu"),
    name: z.string().min(1, "Numele este obligatoriu"),
    uploadthingKey: z.string().min(1, "Cheia de upload este obligatorie"),
    url: z.string().min(1, "Imaginea este obligatorie"),
  }),
  gallery: z.array(
    z.object({
      id: z.string().min(1, "ID-ul este obligatoriu"),
      name: z.string().min(1, "Numele este obligatoriu"),
      uploadthingKey: z.string().min(1, "Cheia de upload este obligatorie"),
      url: z.string().min(1, "Imaginea este obligatorie"),
    })
  ),
  description: z.string().optional(),
  categoryId: z.string().min(1, "Categoria este obligatorie"), // Main category is required
  subcategoryId: z.string().nullable().optional(), // Subcategory is optional
  // Array of attributes with their selected values
  attributes: z.array(
    z.object({
      attributeId: z.string(),
      values: z.array(z.string().min(1, "Minim o valoare este obligatorie")),
    })
  ),
  createdAt: z.date().optional(), // Handled by Prisma
  updatedAt: z.date().optional(), // Handled by Prisma
});

export const categorySchema = z.object({
  id: z.string().optional(),
  name: z.string().min(1, { message: "Campul este obligatoriu" }).max(100),
  description: z.string().optional(),
  slug: z.string().optional(),
  parentId: z.string().nullable().optional(),
  children: z.array(z.string()).optional(),
});

export const attributeSchema = z.object({
  id: z.string().optional(),
  name: z.string().min(1, "Campul este obligatoriu"),
  slug: z.string().optional(),
  values: z
    .array(z.string().min(1, "Campul este obligatoriu"))
    .nonempty("Cel putin o valoare este necesara"),
});

const MAX_FILE_SIZE = 500000000;
const ACCEPTED_IMAGE_TYPES = [
  "image/jpeg",
  "image/jpg",
  "image/png",
  "image/webp",
];

export const imagesSchema = z.instanceof(FormData);

export const imageSchema = z.object({
  image: z.object({
    id: z.string().min(1, "ID-ul este obligatoriu"),
    name: z.string().min(1, "Numele este obligatoriu"),
    uploadthingKey: z.string().min(1, "Cheia de upload este obligatorie"),
    url: z.string(),
  }),
});

export const orderSchema = z.object({
  // Recipient Info
  shippingLastName: z
    .string()
    .min(1, { message: "Numele destinatarului este obligatoriu" })
    .max(50, { message: "Numele nu poate depăși 50 de caractere" }),
  shippingFirstName: z
    .string()
    .min(1, { message: "Prenumele destinatarului este obligatoriu" })
    .max(50, { message: "Prenumele nu poate depăși 50 de caractere" }),
  shippingPhone: z
    .string()
    .min(1, { message: "Numărul de telefon este obligatoriu" })
    .max(12, { message: "Numărul de telefon nu poate depăși 12 caractere" }),
  shippingEmail: z
    .string()
    .min(1, { message: "Emailul este obligatoriu" })
    .max(100, { message: "Emailul nu poate depăși 100 de caractere" })
    .optional(),

  // Address Info
  shippingCounty: z
    .string()
    .min(1, { message: "Județul este obligatoriu" })
    .max(50, { message: "Județul nu poate depăși 50 de caractere" }),
  shippingLocality: z
    .string()
    .min(1, { message: "Localitatea este obligatorie" })
    .max(50, { message: "Localitatea nu poate depăși 50 de caractere" }),
  shippingStreet: z
    .string()
    .min(1, { message: "Strada este obligatorie" })
    .max(255, { message: "Strada nu poate depăși 255 de caractere" }),
  shippingStreetNo: z
    .string()
    .max(10, { message: "Numărul străzii nu poate depăși 10 caractere" })
    .optional(),
  shippingZipCode: z
    .string()
    .min(1, { message: "Codul postal este obligatoriu" })
    .max(6, { message: "Codul postal nu poate depăși 6 caractere" })
    .optional(),
  shippingBuilding: z
    .string()
    .max(20, { message: "Blocul nu poate depăși 20 de caractere" })
    .optional(),
  shippingEntrance: z
    .string()
    .max(16, { message: "Scara nu poate depăși 16 caractere" })
    .optional(),
  shippingFloor: z
    .string()
    .max(10, { message: "Etajul nu poate depăși 10 caractere" })
    .optional(),
  shippingApartment: z
    .string()
    .max(10, { message: "Apartamentul nu poate depăși 10 caractere" })
    .optional(),

  // Billing Info
  billingLastName: z
    .string()
    .min(1, { message: "Numele este obligatoriu" })
    .max(50, { message: "Numele nu poate depăși 50 de caractere" }),
  billingFirstName: z
    .string()
    .min(1, { message: "Prenumele este obligatoriu" })
    .max(50, { message: "Prenumele nu poate depăși 50 de caractere" }),
  billingPhone: z
    .string()
    .min(1, { message: "Numărul de telefon este obligatoriu" })
    .max(12, { message: "Numărul de telefon nu poate depăși 12 caractere" }),
  billingEmail: z
    .string()
    .min(1, { message: "Emailul este obligatoriu" })
    .max(100, { message: "Emailul nu poate depăși 100 de caractere" })
    .optional(),
  billingCounty: z
    .string()
    .min(1, { message: "Județul este obligatoriu" })
    .max(50, { message: "Județul nu poate depăși 50 de caractere" }),
  billingLocality: z
    .string()
    .min(1, { message: "Localitatea este obligatorie" })
    .max(50, { message: "Localitatea nu poate depăși 50 de caractere" }),
  billingStreet: z
    .string()
    .min(1, { message: "Strada este obligatorie" })
    .max(255, { message: "Strada nu poate depăși 255 de caractere" }),
  billingStreetNo: z
    .string()
    .max(50, { message: "Numărul străzii nu poate depăși 50 caractere" })
    .optional(),
  billingZipCode: z
    .string()
    .min(1, { message: "Codul postal este obligatoriu" })
    .max(6, { message: "Codul postal nu poate depăși 6 caractere" })
    .optional(),

  // Order Info
  paymentMethod: z
    .string()
    .min(1, { message: "Metoda de plată este obligatorie" }),
});
