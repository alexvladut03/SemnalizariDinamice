// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String  @id @default(uuid()) // Use uuid for PostgreSQL
  username String  @unique
  name     String?
  password String
}

model Attribute {
  id       String   @id @default(uuid()) // Use uuid for PostgreSQL
  name     String   @unique
  slug     String   @unique
  values   String[] // An array of possible values for the attribute

  // Linking with ProductAttribute
  productAttributes ProductAttribute[]
}

model Product {
  id            String     @id @default(uuid()) // Use uuid for PostgreSQL
  sku           String     @unique
  name          String
  slug          String
  price         Float
  stock         Int
  mainImage     String
  gallery       String[]   // Array of image URLs
  description   String?

  // Main Category
  categoryId    String?    // Removed @db.ObjectId since PostgreSQL uses plain String
  category      Category?  @relation("ProductCategory", fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  // Subcategory
  subcategoryId String?    // Removed @db.ObjectId since PostgreSQL uses plain String
  subcategory   Category?  @relation("ProductSubcategory", fields: [subcategoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  // Relation to ProductAttribute
  attributes    ProductAttribute[]

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Category {
  id          String    @id @default(uuid()) // Use uuid for PostgreSQL
  name        String    @unique
  description String?
  slug        String    @unique
  parentId    String?   // Removed @db.ObjectId since PostgreSQL uses plain String
  parent      Category? @relation("CategoryParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Category[] @relation("CategoryParent")

  // Relation to Product (main and subcategory)
  products    Product[]  @relation("ProductCategory")
  subProducts Product[]  @relation("ProductSubcategory")
}

model ProductAttribute {
  id          String     @id @default(uuid()) // Use uuid for PostgreSQL
  attributeId String     // Removed @db.ObjectId since PostgreSQL uses plain String
  productId   String     // Removed @db.ObjectId since PostgreSQL uses plain String
  values      String[]   // Array of values for the attribute (e.g., Red, Yellow)

  // Relations
  attribute   Attribute  @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  product     Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
}
