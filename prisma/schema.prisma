// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model User {
  id       String  @id @default(uuid()) // Use uuid for PostgreSQL
  username String  @unique
  name     String?
  password String
}

model Attribute {
  id       String   @id @default(uuid()) // Use uuid for PostgreSQL
  name     String   @unique
  slug     String   @unique
  values   String[] // An array of possible values for the attribute

  // Linking with ProductAttribute
  productAttributes ProductAttribute[]
}

model Product {
  id            String        @id @default(uuid())
  sku           String        @unique
  name          String
  slug          String
  price         Float
  stock         Int
  length        Float
  width         Float
  height        Float
  weight        Float
  description   String?      

  // Many-to-many relation to Image model
  images        ProductImage[]

  // Main Category
  categoryId    String?
  category      Category?     @relation("ProductCategory", fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  // Subcategory
  subcategoryId String?
  subcategory   Category?     @relation("ProductSubcategory", fields: [subcategoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  // Relation to ProductAttribute
  attributes    ProductAttribute[]

  // Relation to OrderProduct
  orderProducts OrderProduct[]

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Image {
  id              String        @id @default(uuid())
  name            String        // Name of the image
  uploadthingKey  String        // ID from Uploadthing
  url             String        // URL of the image
  altText         String?       // Alt text for the image
  createdAt       DateTime      @default(now())

  // Many-to-many relation to Product
  products      ProductImage[]
}

// Junction model for the many-to-many relationship
model ProductImage {
  product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId     String
  image         Image       @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  imageId       String
  isMain        Boolean     @default(false)  // Flag to indicate if this is the main image for the product
  order         Int         @default(0)      // Optional: for ordering images within a product

  @@id([productId, imageId])
}

model Category {
  id          String    @id @default(uuid()) // Use uuid for PostgreSQL
  name        String    @unique
  description String?
  slug        String    @unique
  parentId    String?   // Removed @db.ObjectId since PostgreSQL uses plain String
  parent      Category? @relation("CategoryParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Category[] @relation("CategoryParent")

  // Relation to Product (main and subcategory)
  products    Product[]  @relation("ProductCategory")
  subProducts Product[]  @relation("ProductSubcategory")
}

model ProductAttribute {
  id          String     @id @default(uuid()) // Use uuid for PostgreSQL
  attributeId String     // Removed @db.ObjectId since PostgreSQL uses plain String
  productId   String     // Removed @db.ObjectId since PostgreSQL uses plain String
  values      String[]   // Array of values for the attribute (e.g., Red, Yellow)

  // Relations
  attribute   Attribute  @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  product     Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id                  String      @id @default(uuid())
  orderId             String     @unique
  totalCost           Float       // Total cost of the order, including any fees
  productsCost        Float       // Cost of the products in the order
  totalWeight         Float       // Total weight of the order
  parcelDimensions    String      // Dimensions of the parcel
  status              String[]     // Order status (e.g., Pending, Completed, etc.)
  operationDate       DateTime    // Date and time of the operation
  paymentMethod       String      // Payment method (e.g., Card, Cash on Delivery, etc.)
  ntpId               String?
  ntpStatus           Int?

  // Recipient Info
  shippingLastName    String
  shippingFirstName   String
  shippingPhone       String
  shippingEmail       String
  shippingCounty      String
  shippingLocality    String
  shippingStreet      String
  shippingStreetNo    String
  shippingZipCode     String
  shippingBuilding    String?
  shippingEntrance    String?
  shippingFloor       String?
  shippingApartment   String?

  // Billing Info
  billingLastName     String
  billingFirstName    String
  billingPhone        String
  billingEmail        String
  billingCounty       String
  billingLocality     String
  billingStreet       String
  billingStreetNo     String
  billingZipCode      String

  // Relation to Product
  products            OrderProduct[]

  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model OrderProduct {
  orderId   String
  productId String
  quantity  Int     // Quantity of the product in the order
  price     Float   // Price of the product

  // Relations
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Composite primary key
  @@id([orderId, productId])
}

model Token {
  id         String   @id @default(uuid())
  service    String   // Name of the API or service (e.g., "ShippingAPI")
  token      String   // The token itself
  expiresAt  DateTime // Expiration date and time
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

